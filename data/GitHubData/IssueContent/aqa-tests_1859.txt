**Describe the bug**
OOM produced by DirectBufferAllocTest.java

```
01:02:03  Allocating direct ByteBuffers with capacity 1048576 bytes, using 40 threads for 5 seconds...
01:02:03  STDERR:
01:02:03  java.lang.RuntimeException: Errors encountered!
01:02:03  	at DirectBufferAllocTest.main(DirectBufferAllocTest.java:157)
01:02:03  	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
01:02:03  	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
01:02:03  	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
01:02:03  	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
01:02:03  	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
01:02:03  	at java.base/java.lang.Thread.run(Thread.java:832)
01:02:03  	Suppressed: java.lang.OutOfMemoryError: Cannot reserve 1048576 bytes of direct buffer memory (allocated: 134217728, limit: 134217728)
01:02:03  		at java.base/java.nio.Bits.reserveMemory(Bits.java:178)
01:02:03  		at java.base/java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:120)
01:02:03  		at java.base/java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:329)
01:02:03  		at DirectBufferAllocTest.lambda$main$0(DirectBufferAllocTest.java:126)
01:02:03  		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
01:02:03  		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
01:02:03  		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
01:02:03  		... 1 more
```

**To Reproduce**
https://ci.adoptopenjdk.net/job/Test_openjdk14_hs_sanity.openjdk_ppc64_aix/111/console

**Expected behavior**
We expect no OOMs.

**Additional context**
The test was explicitly created to elicit this kind of error, so the [original bug](https://bugs.openjdk.java.net/browse/JDK-6857566) that the test was created for could be useful.

Also, if the fix for this results in a 100% pass rate on openj9, close [this issue when resolved](https://github.com/eclipse/openj9/issues/4473)
