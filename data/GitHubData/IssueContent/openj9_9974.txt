## Overview

https://github.com/eclipse/openj9/issues/3764 mentions the need for enabling JProfiling in the context of JITServer.
To do that, we need to add capability to transfer the JProfiling information between client and server.
We need to be able to serialize and deserialize data structures storing JProfiling information. In addition we need to generate relevant relocation record for profiling compilations to handle references to JProfiling information in the compiled code.

## Design

All the JProfiling information is anchored at `TR_PersistentProfileInfo` class which has pointer to block frequency and value profile info.
This document currently handles block frequency only.

We need to serialize and deserialize following classes for block freqeuency:
1. `TR_PersistentProfileInfo`
2. `TR_CallSiteInfo`
3. `TR_BlockFrequencInfo`
4. `TR_BitVector`

These structures are serialized by the server in `populateBodyInfo()`.
They are written immediately after `TR_PersistentJittedBodyInfo` and `TR_PersistentMethodInfo`.
`TR_PersistentMethodInfo` maintains pointer to two types of profiling info - best and the recent.
If the best and the recent are pointing to two different profiling info, then both of them are serialized.

On the client side, profiling structures are recreated in `TR_RelocationRuntime::relocateMethodMetaData()` from the serialized profiling info.

In addition, the profiling code also has references to elements in `TR_BlockFrequencyInfo::_frequencies` array and `TR_BlockFrequencyInfo::_isQueuedForRecompilation` flag. Therefore, we need to generate relocation records for these fields when performing profiling compilation.

### Client to server 

Server sends the profiling information as part of the compiled body to the client. But client also needs to send back this data back to server when it decides to compile the method at the next level that would use the profiling data.
This is done by sending the data as part of the compilation request in `remoteCompile()`.
Again, both the recent and best profiling information, if they are different, is sent to the server.

In addition to this, client also sends profiling information when it creates resolved methods and passes the relevant information to the server. 

## Implementation

### Serialization/Deserialization

To serialize and de-serialize the data structures, helper methods are added in each of the classes.
These are:
```
class TR_PersistentProfileInfo
   {
   public:
   /**
    * @brief Determines the size of the serialized data for this object
    *
    * @return Number of bytes required for serializing this object
    */
   uint32_t getSizeForSerialization() const;

   /**
    * @brief Serialize this object and store it in the memory buffer
    *
    * @param buffer Memory buffer where serialized data is to be stored
    *
    * @note The caller should ensure buffer is large enough to accommodate the serialized data.
    * On return the buffer gets updated to point to the location past the serialized data.
    * Also see getSizeForSerialization(), deserialize(uint8_t * &).
    */
   void serialize(uint8_t * &buffer) const;

   /**
    * @brief Method for creating TR_PersistentProfileInfo from serialized data
    *
    * @param buffer Memory buffer where serialized data is stored
    *
    * @return Pointer to TR_PersistentProfileInfo created from serialized data
    *
    * @note This method does not check against buffer over-reads. The caller should ensure that the
    * the memory buffer has been populated by calling the serialized() method to avoid buffer over-reads.
    * On return the buffer gets updated to point to the location past the serialized data.
    * Also see getSizeForSerialization(), serialize().
    */
   static TR_PersistentProfileInfo * deserialize(uint8_t * &buffer)
      {
      return new (PERSISTENT_NEW) TR_PersistentProfileInfo(buffer);
      }

   private:
   /**
    * This data structure contains all the fields required for serializing an object of TR_PersistentProfileInfo.
    * Memebers of primitive type are represented as it is, and the pointer types which can have NULL value are 
    * represented as bool to indicate their absence/presence instead of storing the raw address.
    */
   struct SerializedPPI {
      bool hasCallSiteInfo;
      bool hasBlockFrequencyInfo;
      bool hasValueProfileInfo;
   };

   /**
    * @brief Constructor for creating TR_PersistentProfileInfo from serialized data
    *
    * @param buffer Memory area that contains the serialized PersistentProfileInfo object
    */
   TR_PersistentProfileInfo(uint8_t * &buffer);
   };

class TR_BlockFrequencyInfo
   {
   ...
   public:
   /**
    * @brief Determines the size of the serialized data for this object
    *
    * @return Number of bytes required for serializing this object
    */
   uint32_t getSizeForSerialization() const;

   /**
    * @brief serialize this object and store it in the memory buffer
    *
    * @param buffer Memory buffer where serialized data is to be stored
    *
    * @note The caller should ensure buffer is large enough to accommodate the serialized data.
    * On return the buffer gets updated to point to the location past the serialized data.
    * Also see getSizeForSerialization(), deserialize(uint8_t * &).
    */
   void serialize(uint8_t * &buffer) const;

   /**
    * @brief Method for creating TR_BlockFrequencyInfo from serialized data
    *
    * @param buffer Memory buffer where serialized data is stored
    * @param currentProfile Pointer to TR_PersistentProfileInfo object at which TR_BlockFrequencyInfo object is anchored at
    *
    * @return Pointer to TR_BlockFrequencyInfo created from serialized data
    *
    * @note This method does not check against buffer over-reads. The caller should ensure that the
    * the memory buffer has been populated by calling the serialized() method to avoid buffer over-reads.
    * On return the buffer gets updated to point to the location past the serialized data.
    * Also see getSizeForSerialization(), serialize().
    */
   static TR_BlockFrequencyInfo * deserialize(uint8_t * &buffer, TR_PersistentProfileInfo *currentProfileInfo);
   ...
   private:
   /**
    * This data structure contains all the fields required for serializing an object of TR_PersistentProfileInfo.
    * Members of primitive type are represented as it is, and the pointer types which can have NULL value are 
    * represented as bool to indicate their absence/presence instead of storing the raw address.
    */
   struct SerializedBFI
      {
      int32_t numBlocks;
      };

   /**
    * @brief Constructor for creating TR_BlockFrequencyInfo from serialized data
    *
    * @param serializedData pointer to SerializedBFI that contains serialized data for the member fields of primitive type
    * @param buffer memory area that contains serialized data for the member fields of pointer type
    * @param currentProfile pointer to TR_PersistentProfileInfo object at which TR_BlockFrequencyInfo object is anchored at
    */
   TR_BlockFrequencyInfo(const SerializedBFI *serializedData, uint8_t * &buffer, TR_PersistentProfileInfo *currentProfile);
   };

class TR_CallSiteInfo
   {
   ...
   public:
   /**
    * @brief Determines the size of the serialized data for this object
    *
    * @return Number of bytes required for serializing this object
    */
   uint32_t getSizeForSerialization() const;

   /**
    * @brief Serialize this object and store it in the memory buffer
    *
    * @param buffer Memory buffer where serialized data is to be stored
    *
    * @note The caller should ensure buffer is large enough to accommodate the serialized data.
    * On return the buffer gets updated to point to the location past the serialized data.
    * Also see getSizeForSerialization(), deserialize(uint8_t * &).
    */
   void serialize(uint8_t * &buffer) const;

   /**
    * @brief Method for creating TR_CallSiteInfo from serialized data
    *
    * @param buffer Memory buffer where the serialized data is stored
    *
    * @return Pointer to TR_CallSiteInfo created from serialized data
    *
    * @note This method does not check against buffer over-reads. The caller should ensure that the
    * the memory buffer has been populated by calling the serialized() method to avoid buffer over-reads.
    * On return the buffer gets updated to point to the location past the serialized data.
    * Also see getSizeForSerialization(), serialize().
    */
   static TR_CallSiteInfo * deserialize(uint8_t * &buffer);

   private:

   /**
    * This data structure contains all the fields required for serializing an object of TR_PersistentProfileInfo.
    * Memebers of primitive type are represented as it is, and the pointer types which can have NULL value are 
    * represented as bool to indicate their absence/presence instead of storing the raw address.
    */
   struct SerializedCSI
      {
      size_t numCallSites;
      };

   /**
    * @brief constructor for creating TR_CallSiteInfo from serialized data
    *
    * @param serializedData pointer to SerializedCSI that contains serialized data for the member fields of primitive type
    * @param buffer memory area that contains serialized data for the member fields of pointer type
    */
   TR_CallSiteInfo(const SerializedCSI *serializedData, uint8_t * &buffer);
   };
```

### Relocation
To generate relocation records for an element  in `TR_BlockFrequencyInfo::_frequencies` array
and `TR_BlockFrequencyInfo::_isQueuedForRecompilation`, two new relocation types are added:
1. `TR_BlockFrequency`
2. `TR_RecompQueuedFlag`

Relocation record of type `TR_BlockFrequency` stores the offset of the frequency in the `TR_BlockFrequencyInfo::_frequencies` array:
```
struct TR_RelocationRecordBlockFrequencyBinaryTemplate: public TR_RelocationRecordBinaryTemplate
   {
   uintptr_t _frequencyOffset;
   };
```

To identify the symbols that need these two relocation records, two new flags are added in `OMRSymbol`:
1. `BlockFrequency`
2. `RecompQueuedFlag`

Methods to set and get these flags are:
```
void OMRSymbol::setBlockFrequency();
bool OMRSymbol::isBlockFrequency();
void OMRSymbol::setRecomQueuedFlag();
bool OMRSymbol::isRecompQueuedFlag();
```

### Client to server 

Client sends profiling information to the server when it creates resolved methods in `TR_ResolvedJ9JITServerMethod::packMethodInfo()`.
`TR_ResolvedJ9JITServerMethodInfo` is extended to include the the serialized contents of recent and best profiling info in the form of `std::string`.

### PR breakdown

- [x] Support for serialization of data structures: https://github.com/eclipse/omr/pull/5201
- [x] Serialization of block frequency data structures: https://github.com/eclipse/openj9/pull/9590
- [x] Add new relocation records for data structures to support AOT compilation of profiled code: https://github.com/eclipse/openj9/pull/9591
- [ ] Changes to create new relocation records: https://github.com/eclipse/omr/pull/5202