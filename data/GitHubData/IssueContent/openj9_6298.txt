In Gencon GC policy Class Unloading is not available in Local GC (Scavenger) currently. The Class Unloading is one of the most common reasons to percolate to Global GC, particularly for applications using "reflect" heavily. An unloading of classes in Scavenger might reduce number of Global GCs dramatically in some cases. An unloading for classes is done on classloader level - so if non of classloader classes instances are alive the classloader can be unloaded. (There is an exception for Anonymous classes treated specially).

There is obvious that Scavenger can make decision about classloader unloading if all instances of all it's classes are located in Nursery only (has no information about liveness objects in the Tenure). This can be controlled by adding special flag to classloader "has_Instances_In_Tenure". Set this flag to "off" at classloader creation time initially. In Gencon there are only two ways to get object in Tenure: direct allocation in Tenure (out-of-line path) and tenuring of object in Scavenger. In both cases "has_Instances_In_Tenure" flag should be set to object->class->classloader. So the only classloaders with "has_Instances_In_Tenure" flag is not set might be subject for class unloading in Scavenger.

Classloader can be unloaded if non of its class instances are alive. This can be controlled by using classloader object location. It should be allocated in Nursery initially and be attempted to be copied every time we scan copied instance of any of its classes. (Class object can be copied at the same time as well or its copy operation can be postponed to Clearable phase).

Class unloading in Scavenger Clearable phase would look like: if classloader flag "has_Instances_In_Tenure" is not set (instances in Nursery only) and its classloader object located in Survivor part of the Nursery (non of its instances have been copied so non of them are alive) this classloader can be unloaded.

Note: classloader object can be tenured because of its age naturally - in this case class unloading would be possible in Global GC only. There are two possibilities here - either it is almost irrelevant because we can try to address unloading for short living classloaders/classes created by "reflect" or we can artificially prolong life for classloader objects in the Nursery.
Also classloader object can be tenured if any of class instances are tenured. However "has_Instances_In_Tenure" still be necessary in this case because it does not cover object allocation path.

Setting flag "has_Instances_In_Tenure" (if it has not been set yet) for each tenured object might be a possible performance concern (but should not be too bad IMO)
