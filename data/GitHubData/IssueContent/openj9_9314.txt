From the JVM spec:
> Structured locking is the situation when, during a method invocation, every exit on a given monitor matches a preceding entry on that monitor. Since there is no assurance that all code submitted to the Java Virtual Machine will perform structured locking, implementations of the Java Virtual Machine are permitted but not required to enforce both of the following two rules guaranteeing structured locking. Let T be a thread and M be a monitor. Then:
> 1. The number of monitor entries performed by T on M during a method invocation must equal the number of monitor exits performed by T on M during the method invocation whether the method invocation completes normally or abruptly.
> 2. At no point during a method invocation may the number of monitor exits performed by T on M since the method invocation exceed the number of monitor entries performed by T on M since the method invocation.
> Note that the monitor entry and exit automatically performed by the Java Virtual Machine when  invoking a synchronized method are considered to occur during the calling method's invocation.
-- http://cr.openjdk.java.net/~iris/se/11/latestSpec/java-se-11-jvms-draft-diffs.pdf

We may end up with cleaner locking code if we enforced structured locking.

This also came up recently in a discussion on how to handle OSR points for inlined synchronized methods - TODO get link.

We should investigate the benefits / costs of adopting Structured Locking


_Originally posted by @DanHeidinga in https://github.com/eclipse/openj9/issues/9276#issuecomment-617323639_