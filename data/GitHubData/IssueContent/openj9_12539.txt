### Error

`NoSuchMethodError` thrown from `MethodHandleResolver.getCPMethodHandleAt`.

```
test TestNative.testNativeAccess(TestNative$$Lambda$108/0x00000000e1e70ee0@9414ac56, TestNative$$Lambda$101/0x00000000e1e70460@15d3e380, [100:b8]): failure
java.lang.NoSuchMethodError: java/lang/invoke/VarHandle.get(Ljdk/incubator/foreign/MemorySegment;Ljava/lang/Long;)Ljava/lang/Object; (loaded from jrt:/java.base by <Bootstrap Loader>) called from class TestNative (loaded from file:/.../openjdk-tests/TKG/output_16171331559140/jdk_custom_0/work/classes/0/java/foreign/TestNative.d/ by jdk.internal.loader.ClassLoaders$AppClassLoader@3144ebb).
	at java.base/java.lang.invoke.MethodHandleResolver.getCPMethodHandleAt(Native Method)
	at java.base/java.lang.invoke.MethodHandleResolver.getAdditionalBsmArg(MethodHandleResolver.java:382)
	at java.base/java.lang.invoke.MethodHandleResolver.resolveInvokeDynamic(MethodHandleResolver.java:181)
	at TestNative.lambda$nativeAccessOps$17(TestNative.java:243)
	at TestNative$$Lambda$108/0x00000000e1e70ee0.accept(Unknown Source)
	at TestNative.testNativeAccess(TestNative.java:159)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
```

### Initial Investigation

`VarHandle.get` is a `VarHandle MH/VH polymorphic method`. The above stack suggests that `invokedynamic` is invoked on `VarHandle.get`, which should never happen. For MH/VH `polymorphic` methods, the correct bytecode is `invokevirtual` which gets rewritten to `invokehandle`. Here, a `Lambda` is also involved. For `Lambdas`, OJDK code dynamically generates the bytecodes. Below, `invokedynamic` on `VarHandle.get` is called from `Lambda generated bytecodes`. We will need to investigate why `Lambda` generated bytecodes are calling `invokedynamic` on `VarHandle.get`.

`Lambda bytecode generation`: https://github.com/ibmruntimes/openj9-openjdk-jdk16/blob/openj9/src/java.base/share/classes/java/lang/invoke/InnerClassLambdaMetafactory.java

### Run Failing Test: TestNative.java

```
# Execute from JDK16 or JDKnext extensions repo
make test TEST="java/foreign/TestNative.java"
```

### Resources
- JDK16 extensions repo: https://github.com/ibmruntimes/openj9-openjdk-jdk16
- JDKnext extensions repo: https://github.com/ibmruntimes/openj9-openjdk-jdk
- JTreg-5.1: https://ci.adoptopenjdk.net/view/Dependencies/job/jtreg/lastSuccessfulBuild/artifact/

### Steps to build an OpenJ9 JDK with OJDK MHs enabled

Refer to #11458.