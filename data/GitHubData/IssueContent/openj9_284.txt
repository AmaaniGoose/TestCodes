A customer experienced a deadlock but it was difficult to diagnose. The javacore didn't detect the deadlock and the thread that was blocked was waiting on a `J9VMInternals$ClassInitializationLock`, but it showed as `<unowned>`, so it was difficult to understand which other thread was part of the deadlock (through code inspection, we deduced it was a class static initializer). Here's the thread blocking most of the threads in the JVM:

```
3XMTHREADINFO      "Thread-62" J9VMThread:0x000000000232BB00, j9thread_t:0x00007FB9C00360A0, java/lang/Thread:0x0000000080BD75E0, state:CW, prio=5
3XMJAVALTHREAD            (java/lang/Thread getId:0x71, isDaemon:true)
3XMTHREADINFO1            (native thread ID:0x5578, native priority:0x5, native policy:UNKNOWN, vmstate:CW, vm thread flags:0x00000101)
3XMTHREADINFO2            (native stack address range from:0x00007FB9C4E3F000, to:0x00007FB9C4E80000, size:0x41000)
3XMCPUTIME               CPU usage total: 2.473643599 secs, current category="Application"
3XMTHREADBLOCK     **Waiting on: java/lang/J9VMInternals$ClassInitializationLock@0x0000000081789B98 Owned by: <unowned>**
3XMHEAPALLOC             Heap bytes allocated since last GC cycle=0 (0x0)
3XMTHREADINFO3           Java callstack:
4XESTACKTRACE                at com/ibm/apc/xd/demand/predictors/APCXDDemandPredictorShim$1.cellAdded(APCXDDemandPredictorShim.java:59) [...]
```

And here's the thread that was the other half of the deadlock:

```
3XMTHREADINFO      "APCRunnable" J9VMThread:0x0000000003351B00, j9thread_t:0x00007FB9D834DE30, java/lang/Thread:0x00000000830FC468, state:B, prio=5
3XMJAVALTHREAD            (java/lang/Thread getId:0x1D7, isDaemon:true)
3XMTHREADINFO1            (native thread ID:0x5B7F, native priority:0x5, native policy:UNKNOWN, vmstate:B, vm thread flags:0x00000201)
3XMTHREADINFO2            (native stack address range from:0x00007FB9BE87F000, to:0x00007FB9BE8C0000, size:0x41000)
3XMCPUTIME               CPU usage total: 1.717428364 secs, current category="Application"
3XMTHREADBLOCK     **Blocked on: com/ibm/ws/odc/nd/ODCTreeImpl@0x0000000080BC35F8 Owned by: "Thread-62" (J9VMThread:0x000000000232BB00, java/lang/Thread:0x0000000080BD75E0)**
3XMHEAPALLOC             Heap bytes allocated since last GC cycle=0 (0x0)
3XMTHREADINFO3           Java callstack:
4XESTACKTRACE                at com/ibm/apc/xd/demand/predictors/combined/APCXDCombinedPredictorListener.checkIfWebServerWithIMEnabledOrODRExists(APCXDCombinedPredictorListener.java:197)
4XESTACKTRACE                at com/ibm/apc/xd/demand/predictors/combined/APCXDCombinedPredictorListener.<init>(APCXDCombinedPredictorListener.java:85)
4XESTACKTRACE                at com/ibm/apc/xd/demand/predictors/APCXDDemandPredictorShim.handleConfigChange_CellAdded(APCXDDemandPredictorShim.java:83)
5XESTACKTRACE                   (entered lock: java/util/HashMap@0x0000000081789C40, entry count: 1)
4XESTACKTRACE                at com/ibm/apc/xd/demand/predictors/APCXDDemandPredictorShim.access$000(APCXDDemandPredictorShim.java:40)
4XESTACKTRACE                at com/ibm/apc/xd/demand/predictors/APCXDDemandPredictorShim$1.cellAdded(APCXDDemandPredictorShim.java:59)
4XESTACKTRACE                at com/ibm/ws/xd/container/state/odc/impl/XdCsODCHelper_Notification.notifyListeners_Cell(XdCsODCHelper_Notification.java:309)
4XESTACKTRACE                at com/ibm/ws/xd/container/state/odc/impl/XdCsODCHelper_Subscription.subscribe(XdCsODCHelper_Subscription.java:77)
5XESTACKTRACE                   (entered lock: com/ibm/apc/xd/demand/predictors/APCXDDemandPredictorShim$1@0x0000000081789C68, entry count: 1)
4XESTACKTRACE                at com/ibm/ws/xd/container/state/odc/XdCsListener_Cell.subscribe(XdCsListener_Cell.java:46)
4XESTACKTRACE                **at com/ibm/apc/xd/demand/predictors/APCXDDemandPredictorShim.<clinit>**(APCXDDemandPredictorShim.java:68) [...]
```

The proposed solution is to replace `<unowned>` with the thread doing the class static initialization:

`3XMTHREADBLOCK     Waiting on: java/lang/J9VMInternals$ClassInitializationLock@0x0000000081789B98 **Owned by: "APCRunnable" (J9VMThread [...]**`

Ideally, the javacore deadlock detection could detect this, although just adding the owner above would be sufficient.

Full javacore available internally within IBM (ask kevin.grigorenko@us.ibm.com).