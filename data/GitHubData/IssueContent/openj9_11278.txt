As part of project Panama, Oracle will be releasing an application called jextract

```
jextract is a simple - but convenient - tool which generates a Java API from one or more native C headers. The tool can be obtained by building the foreign-jextract branch of Panama foreign repository.

Interacting with the jextract tool usually involves two steps:

    Use the jextract tool to generate a java interface for some C header files
    Write a Java program which invokes the wrapper API points generated by jextract

The jextract tool provides some basic options in order to control how the extraction process works; these are listed below:

    -C <String> - specify arguments to be passed to the underlying Clang parser
    -I <String> - specify include files path
    -l <String> - specify a library (name or full absolute path) which should be linked when the generated API is loaded
    -d <String> - specify where to place generated files
    -t <String> specify the target package for the generated classes
    --filter <String> - simple string-based filtering mechanism; only symbols from headers whose absolute path contains the specified string will be included in the generated API
    --source - generate java sources instead of classfiles

The remainder of this documents shows some basic usage examples of the jextract tool.
```

IBM JDKs have an application called jextract:

```
Use the jextract utility to process system dumps.

For an analysis of core dumps from Linux and AIXÂ® platforms, copies of executable files and libraries are required along with the system dump. You must run the jextract utility provided in the SDK to collect these files. You must run jextract using the same SDK level, on the same system that produced the system dump. The jextract utility compresses the dump, executable files, and libraries into a single .zip file for use in subsequent problem diagnosis.

When a core file is generated, run the jextract utility against the core file with the following syntax:

jextract <core file name> [<zip_file>]
Copy code

to generate a compressed file in the current directory, containing the dump and the required executable file and libraries. The jextract utility is in the directory sdk/jre/bin. If you run jextract on a JVM level that is different from the one on which the dump was produced you see the following messages:

J9RAS.buildID is incorrect (found e8801ed67d21c6be, expecting eb4173107d21c673). 
This version of jextract is incompatible with this dump. 
Failure detected during jextract, see previous message(s).
```


