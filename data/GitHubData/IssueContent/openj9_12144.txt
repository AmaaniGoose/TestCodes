Java -version output
--------------------

openjdk 11.0.10 2021-01-19
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.10+9)
Eclipse OpenJ9 VM AdoptOpenJDK (build openj9-0.24.0, JRE 11 Linux amd64-64-Bit Compressed References 20210120_910 (JIT enabled, AOT enabled)
OpenJ9   - 345e1b09e
OMR      - 741e94ea8
JCL      - 0a86953833 based on jdk-11.0.10+9)

Summary of problem
------------------
The issue occurs when the application run in docker container in a Kubenretes cluster.
From time to time, I got a JVM crash, without real understanding about the scenario. The crash is generated by a GPF. See below some extract from the generated javacore file:
[jvm-crash-diagnostics-files.zip](https://github.com/eclipse/openj9/files/6100216/jvm-crash-diagnostics-files.zip)

```
0SECTION       TITLE subcomponent dump routine
NULL           ===============================
1TICHARSET     UTF-8
1TISIGINFO     Dump Event "gpf" (00002000) received
1TIDATETIME    Date: 2021/03/08 at 08:34:04:038
1TINANOTIME    System nanotime: 1185340736198840
1TIFILENAME    Javacore filename:    /data/algosec-ms/logs/javacore.20210308.083352.1.0002.txt
1TIREQFLAGS    Request Flags: 0x81 (exclusive+preempt)
1TIPREPSTATE   Prep State: 0x100 (trace_disabled)
1TIPREPINFO    Exclusive VM access not taken: data may not be consistent across javacore sections
```
The thread that was running at the crash:
```
NULL           ------------------------------------------------------------------------
0SECTION       THREADS subcomponent dump routine
NULL           =================================
NULL
1XMPOOLINFO    JVM Thread pool info:
2XMPOOLTOTAL       Current total number of pooled threads: 62
2XMPOOLLIVE        Current total number of live threads: 58
2XMPOOLDAEMON      Current total number of live daemon threads: 50
NULL
1XMCURTHDINFO  Current thread
3XMTHREADINFO      "ActiveMQ Transport: ssl://activemq/10.105.185.134:61616" J9VMThread:0x0000000000D5EB00, omrthread_t:0x00007F39D5AE16A0, java/lang/Thread:0x00000000FE408098, state:R, prio=5
3XMJAVALTHREAD            (java/lang/Thread getId:0x1CF, isDaemon:false)
3XMTHREADINFO1            (native thread ID:0x1DC, native priority:0x5, native policy:UNKNOWN, vmstate:R, vm thread flags:0x40400020)
3XMTHREADINFO2            (native stack address range from:0x00007F39BB023000, to:0x00007F39BB063000, size:0x40000)
3XMCPUTIME               CPU usage total: 0.138073275 secs, current category="Application"
3XMHEAPALLOC             Heap bytes allocated since last GC cycle=21008 (0x5210)
3XMTHREADINFO3           Java callstack:
4XESTACKTRACE                at jdk/crypto/jniprovider/NativeCrypto.CBCUpdate(Native Method)
4XESTACKTRACE                at com/sun/crypto/provider/NativeCipherBlockChaining.encrypt(NativeCipherBlockChaining.java:254)
4XESTACKTRACE                at com/sun/crypto/provider/NativeCipherBlockChaining.decrypt(NativeCipherBlockChaining.java:289)
4XESTACKTRACE                at com/sun/crypto/provider/CipherCore.update(CipherCore.java:843(Compiled Code))
4XESTACKTRACE                at com/sun/crypto/provider/AESCipher.engineUpdate(AESCipher.java:410(Compiled Code))
4XESTACKTRACE                at javax/crypto/CipherSpi.bufferCrypt(CipherSpi.java:777)
4XESTACKTRACE                at javax/crypto/CipherSpi.engineUpdate(CipherSpi.java:555(Compiled Code))
4XESTACKTRACE                at javax/crypto/Cipher.update(Cipher.java:2040(Compiled Code))
4XESTACKTRACE                at sun/security/ssl/SSLCipher$T11BlockReadCipherGenerator$BlockReadCipher.decrypt(SSLCipher.java:1312)
4XESTACKTRACE                at sun/security/ssl/SSLSocketInputRecord.decodeInputRecord(SSLSocketInputRecord.java:260(Compiled Code))
4XESTACKTRACE                at sun/security/ssl/SSLSocketInputRecord.decode(SSLSocketInputRecord.java:181(Compiled Code))
4XESTACKTRACE                at sun/security/ssl/SSLTransport.decode(SSLTransport.java:110(Compiled Code))
4XESTACKTRACE                at sun/security/ssl/SSLSocketImpl.decode(SSLSocketImpl.java:1411(Compiled Code))
4XESTACKTRACE                at sun/security/ssl/SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1376(Compiled Code))
4XESTACKTRACE                at sun/security/ssl/SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:963(Compiled Code))
4XESTACKTRACE                at org/apache/activemq/transport/tcp/TcpBufferedInputStream.fill(TcpBufferedInputStream.java:50)
4XESTACKTRACE                at org/apache/activemq/transport/tcp/TcpTransport$2.fill(TcpTransport.java:634)
4XESTACKTRACE                at org/apache/activemq/transport/tcp/TcpBufferedInputStream.read(TcpBufferedInputStream.java:59(Compiled Code))
4XESTACKTRACE                at org/apache/activemq/transport/tcp/TcpTransport$2.read(TcpTransport.java:619(Compiled Code))
4XESTACKTRACE                at java/io/DataInputStream.readInt(DataInputStream.java:392(Compiled Code))
4XESTACKTRACE                at org/apache/activemq/openwire/OpenWireFormat.unmarshal(OpenWireFormat.java:268)
4XESTACKTRACE                at org/apache/activemq/transport/tcp/TcpTransport.readCommand(TcpTransport.java:240)
4XESTACKTRACE                at org/apache/activemq/transport/tcp/TcpTransport.doRun(TcpTransport.java:232)
4XESTACKTRACE                at org/apache/activemq/transport/tcp/TcpTransport.run(TcpTransport.java:215)
4XESTACKTRACE                at java/lang/Thread.run(Thread.java:836)
```


Diagnostic files
----------------

Diagnostics files (javacore*txt, Snap*trc and jitdump*dmp) are attached. Let me know if you need also the core.

