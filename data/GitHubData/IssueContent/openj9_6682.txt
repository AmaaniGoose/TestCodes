Arrays.copyOfRange specification defines that a NullPointerException should be throw if ```original``` parameter is ```null``` (https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOfRange-byte:A-int-int-). However, it throws OutOfMemoryError when executing the following program:

```
import java.util.Arrays;
public class A {
   public static void main(String args[]) {
      Arrays.copyOfRange((byte[])null, 0, 2147483647);
   }
}
```

**Affected versions:**

openjdk version "1.8.0_162"
OpenJDK Runtime Environment (build 1.8.0_162-b12)
Eclipse OpenJ9 VM (build openj9-0.8.0, JRE 1.8.0 Linux amd64-64 Compressed References 20180315_120 (JIT enabled, AOT enabled)
OpenJ9   - e24e8aa9
OMR      - 3e8296b4
JCL      - ee1e77df1d based on jdk8u162-b12)

**Steps to reproduce:**

	1. Compile above program
	2. Run it using Eclipse OpenJ9 java

**Current result:**

Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOfRange(Arrays.java:3520)
	at A.main(A.java:4)

**Expected result:**

NullPointerException.