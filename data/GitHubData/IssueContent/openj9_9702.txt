This issue is the design for https://github.com/eclipse/openj9/issues/4847.

## Motivation

This feature is motivated by changes in validation that will likely be required when Project Valhalla lands. With flattened types, the class chains will likely need to be modified. Additionally the time required to validate flattened types will likely be much higher. This is, in that regard, a continuation of the work done in https://github.com/eclipse/openj9/pull/9403.

## Overview

This feature is guarded with the `-Xaot:enableClassChainSharing` option; if set, the class chain generated is in a form such that the class chain of a class is the sub chain of the class chain of its children. Without this option, the chain that is generated is a unique array of offsets for each class.

The following class hierarchy will be used to describe this feature:

```
class A implements IC1;
class B extends A implements IC2, IC3;
```

Without `-Xaot:enableClassChainSharing`, the class chains generated for each would look like the following:

```
Class Chain of A stored at some location in SCC:
3                                        # length of Chain
offset of ROMClass of A
offset of ROMClass of java/lang/Object
offset of ROMClass of IC1


Class Chain of B stored at a different location in SCC:
6                                        # length of Chain
offset of ROMClass of B
offset of ROMClass of A
offset of ROMClass of java/lang/Object
offset of ROMClass of IC2
offset of ROMClass of IC3
offset of ROMClass of IC1
```

Notice that the Class Chain of `A` is contained in the Class Chain of `B`.

With `-Xaot:enableClassChainSharing`, the class chains generated for each would look like the following:

```
ClassChainNode for java/lang/Object stored in SCC:
0                                               # number of interfaces declared on java/lang/Object
offset of ROMClass of java/lang/Object
ClassChainNode::NULL_NODE                       # next node in chain


ClassChainNode for A stored in SCC:
1                                               # number of interfaces declared on A
offset of ROMClass of A
offset of ClassChainNode for java/lang/Object   # next node in chain
offset of ROMClass of IC1


ClassChainNode for B stored in SCC:
2                                               # number of interfaces declared on B
offset of ROMClass of B
offset of ClassChainNode for A                  # next node in chain
offset of ROMClass of IC2
offset of ROMClass of IC3


Class Chain of A == ClassChainNode for A
Class Chain of B == ClassChainNode for B
```

Class Chain sharing takes advantage of a key fact of how interface classes hang off of a class. The linked list of iTables from `A` is the sub list of the linked list of iTables from `B`. Therefore, a node in the class chain only needs to have information about the interfaces declared by the class associated with it. The remaining interfaces will have been captured by the nodes associated with the super classes.

As a consequence of this sharing, the creation of a class chain also results in the creation of the class chains of every class in its hierarchy for free. It also means that when creating the class chain for a class, the chain only has to be created up to the point where a class in the hierarchy already had its chain created.

### Validation
Without `-Xaot:enableClassChainSharing`, the way `A` would be validated is:

1. Acquire the class chain from the SCC
2. Validate that the offset into the SCC of the `J9ROMClass` of `A` matches the offset in the class chain array
3. Iterate through the superclasses of `A` and compare the offset into the SCC of the `J9ROMClass` of each super class with the offsets in the class chain array
4. Iterate through the iTable linked list from the `J9Class` of `A` and compare the offset into the SCC of the `J9ROMClass` of each interface class with the offsets in the class chain array

If everything matches, the class chain validation succeeds.

With `-Xaot:enableClassChainSharing`, the way `A` would be validated is:

1. Acquire the `J9Class` of `A`, and set the current class to it
2. Acquire the iTable linked list from the `J9Class` of `A`, and set the current iTable to it
3. Acquire the class chain node from the SCC
4. Iterate through the class chain in the following manner:
    1. Validate that the offset into the SCC of the `J9ROMClass` of the current class  matches `_romClassOffset`
    2. Iterate through the current iTable linked list `_numInterfaces` times, comparing the offset into the SCC of the `J9ROMClass` of the iTable entry with the appropriate entry in the `_interfaces` array. Note, this process updates the current ITable pointer.
    3. Set the current class to the super class of the current class
    4. Get the next `ClassChainNode` using `_next` (which is the offset into the SCC of the next class chain node)
    5. If `_next` is not `ClassChainNode::NULL_NODE` and the current class is not `NULL`, go to the top of the loop

If everything matches, the class chain validation succeeds. It is important to note that the iTable linked list used in the validation is acquired ONLY from the `J9Class` whose class chain is being validated, and NOT from any of its super classes. In the example above, the iTable linked list is acquired from `A` but never from `java/lang/Object`.

## Structures

A new `private` struct is added to the `TR_J9SharedCache` class:
```
   struct ClassChainNode
      {
      static const uintptr_t NULL_NODE = (uintptr_t)-1;
      static const uint32_t DEFAULT_NUM_INTERFACES = 1;
      static const uint32_t MAX_NUM_INTERFACES = 32;

      /* number of interfaces only implemented by the current class */
      uint32_t  _numInterfaces;

      /* offset of the current class' rom class in the SCC */
      uintptr_t _romClassOffset;

      /* offset of the next ClassChainNode in the SCC */
      uintptr_t _next;

      /* Variable length array of offsets in the SCC of interfaces
       * declared by the current class
       */
      uintptr_t _interfaces[DEFAULT_NUM_INTERFACES];
      };
```
This struct describes the shape of each node in the class chain.

## APIs

The following new private methods are added to the `TR_J9SharedCache` class:
```
   /**
    * @brief Determines the number of interfaces that are specified on the declaration of
    *        the class. This is different from the number of interfaces implemented by the
    *        class, because the class might implement interfaces than are specified on its
    *        declaration (because of interfaces specified on some super class' declaration)
    *
    * @param clazz The J9Class whose declared interfaces is to be determined
    *
    * @return The number of declared interfaces on clazz
    */
   uint32_t numInterfacesDeclared(TR_OpaqueClassBlock *clazz);
```
```
   /**
    * @brief Initializes a class chain node that is part of the sharable class chain
    *
    * @param ccNode The ClassChainNode to be initialized; this pointer is NOT a pointer
    *        into the SCC, but to some local storage
    * @param clazz The J9Class associated with the ClassChainNode to be initialized
    * @param classOffsetInCache The offset into the SCC of the J9ROMClass of clazz
    * @param nextCCNode The ClassChainNode associated with the super class of clazz
    * @param create Parameter to determine whether the node will stored in the SCC
    *
    * @return true if successfully initialized, false otherwise.
    */
   bool initializeClassChainNode(ClassChainNode *ccNode, TR_OpaqueClassBlock *clazz, uintptr_t classOffsetInCache, ClassChainNode *nextCCNode, bool create);
```
```
   /**
    * @brief Stores a class chain node into the SCC
    *
    * @param ccNode The ClassChainNode to be stored (copied) into the SCC; this
    *        pointer is NOT apointer into the SCC, but to some local storage
    *
    * @return The pointer of the ClassChainNode stored in the SCC.
    */
   ClassChainNode *storeClassChainNode(ClassChainNode *ccNode);
```
```
   /**
    * @brief Gets the ClassChainNode in the SCC associated with the J9ROMClass passed in
    *
    * @param romClass The ROMClass associated with the ClassChainNode to be found
    *
    * @return The pointer of the ClassChainNode stored in the SCC; NULL if it doesn't exist
    */
   ClassChainNode * getClassChainNode(J9ROMClass *romClass);
```
```
   /**
    * @brief Gets the next node in the class chain given a ClassChainNode. The pointer
    *        passed in should be a pointer to a ClassChainNode in the SCC.
    *
    * @param ccNode The ClassChainNode whose next node is desired
    *
    * @return The next node in the chain if it exists, NULL otherwise
    */
   ClassChainNode * getNextClassChainNode(ClassChainNode *ccNode);
```
```
   /**
    * @brief Validates a sharable class chain.
    *
    * @param The J9Class whose chain is to be validated
    * @param The start of the class chain
    *
    * @return true if successfully validated, false otherwise.
    */
   bool validateClassChainWithSharing(TR_OpaqueClassBlock *clazz, ClassChainNode *startOfClassChain);
```
```
   /**
    * @brief Validates the interfaces declared on the class associated with the current ClassChainNode.
    *
    * @param ccNode The current class chain node in the class chain
    * @param interfaceElement Pointer into the list of interfaces of the clazz whose chain is being
    *        validated
    *
    * @return true if sucessfully validated, false otherwise.
    */
   bool validateInterfacesInClassChainNode(ClassChainNode *ccNode, J9ITable * & interfaceElement);
```
```
   /**
    * @brief Validates that the romclass matches the one specified in the current class chain node
    *
    * @param romClass The ROMClass of a class in the hierarchy of the class whos chain is being
    *        validated
    * @param offsetInCCNode The offset into the SCC of a class described in the ClassChainNode;
    *        this offset could either be the J9ROMClass of the class associated with the current
    *        class chain node, or the J9ROMClass of one of the declared interfaces of the class
    *        associated with the current class chain node
    *
    * @return true if successfully validated, false otherwise.
    */
   bool romclassMatchesCachedVersion(J9ROMClass *romClass, uintptr_t offsetInCCNode);
```
```
   /**
    * @brief Finds, or creates and stores, the sharable class chain of a class
    *
    * @param clazz The class whose chain is to be created
    * @param storage Memory to be used to create a local copy of the ClassChainNode that will be then
    *        stored (copied) into the SCC
    * @param create Debugging parameter to go through the steps of creating the node but not store it
    *
    * @return The pointer into the SCC of the ClassChainNode; NULL if failure
    */
   ClassChainNode *rememberClassWithSharing(TR_OpaqueClassBlock *clazz, ClassChainNode *storage, bool create);
```

<hr/>

My changes can be found in https://github.com/dsouzai/openj9/tree/classChainSharing. I haven't opened a PR yet because this code is a little non-trivial and I want to thoroughly go through it, and also because I need to fully test it. However, I figured I'd write the design so that reviewers have time to digest the ideas before diving into the code.

I _believe_ that there shouldn't be any changes required for JITServer, because the class chain generation and validation are done on the client side, and the contract of external API (`rememberClass`) has not been changed.

FYI @mstoodle @andrewcraik @mpirvu @ymanton 
