If a javacore is requested (e.g. `user` signal but excluding GPF, abort, and trace-assert javacores) when something already has exclusive access, then, even if exclusive access was requested for the javacore, the javacore will not be taken with exclusive access (`Exclusive VM access not taken`) and this may result in inconsistent thread information and missing thread stacks (e.g. `Unable to walk in-flight data on call stack` and `at (Missing Method)`). For example:

```
1TISIGINFO     Dump Event "user" (00004000) received 
1TIDATETIME    Date: 2020/04/15 at 10:48:15:144
1TINANOTIME    System nanotime: 786679405073383
1TIFILENAME    Javacore filename:    /opt/IBM/WebSphere/AppServer/profiles/ecc/javacore.20200415.104815.17665.0005.txt
1TIREQFLAGS    Request Flags: 0x81 (exclusive+preempt)
1TIPREPSTATE   Prep State: 0x100 (trace_disabled)
1TIPREPINFO    Exclusive VM access not taken: data may not be consistent across javacore sections
[...]
3XMTHREADINFO      "WebContainer : 23" J9VMThread:0x0000000006A30700, omrthread_t:0x00007F588C08C198, java/lang/Thread:0x000000011376DD58, state:R, prio=5
3XMJAVALTHREAD            (java/lang/Thread getId:0x1FD, isDaemon:true)
3XMTHREADINFO1            (native thread ID:0x4846, native priority:0x5, native policy:UNKNOWN, vmstate:R, vm thread flags:0x00000020)
3XMTHREADINFO2            (native stack address range from:0x00007F585E8BE000, to:0x00007F585E8FE000, size:0x40000)
3XMCPUTIME               CPU usage total: 126.046711815 secs, current category="Application"
3XMHEAPALLOC             Heap bytes allocated since last GC cycle=135080 (0x20FA8)
1INTERNAL                    Unable to obtain lock context information
3XMTHREADINFO3           Java callstack:
4XESTACKTRACE                at (Missing Method)
[...]
3XMTHREADINFO      "WebContainer : 21" J9VMThread:0x0000000006A3D400, omrthread_t:0x00007F5888020C08, java/lang/Thread:0x000000011365E1F0, state:R, prio=5
3XMJAVALTHREAD            (java/lang/Thread getId:0x1FB, isDaemon:true)
3XMTHREADINFO1            (native thread ID:0x4844, native priority:0x5, native policy:UNKNOWN, vmstate:R, vm thread flags:0x00000020)
3XMTHREADINFO2            (native stack address range from:0x00007F585E940000, to:0x00007F585E980000, size:0x40000)
3XMCPUTIME               CPU usage total: 224.326439928 secs, current category="Application"
3XMHEAPALLOC             Heap bytes allocated since last GC cycle=3896944 (0x3B7670)
3XMTHREADINFO3           Java callstack:
1INTERNAL                    Unable to walk in-flight data on call stack
```

In this example, this was due to a GC:

```
verbosegc: <exclusive-start id="24277" timestamp="2020-04-15T10:48:15.025" intervalms="679.080">

javacore: 1TIDATETIME    Date: 2020/04/15 at 10:48:15:144

verbosegc: <exclusive-end id="24288" timestamp="2020-04-15T10:48:15.153" durationms="128.581" />
```

This seems to be [by design](https://github.com/eclipse/openj9/blob/d493108cc5cc229002810c55b0ac86df1ca1fbc2/runtime/rasdump/trigger.c#L559) to allow javacores to be taken based on `user` requests if, for example, the JVM is deadlocked.

It would be nice if there was a `request` option that did not enforce this behavior but allowed advanced users that are aware of the risks to instead force the javacore to wait until it can acquire exclusive access. Presumably, this new option would be disabled by default.